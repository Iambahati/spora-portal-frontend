{"version":3,"file":"validation-schemas-CnmCQWVe.js","sources":["../../lib/validation-schemas.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Authentication Schemas\nexport const loginSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  password: z\n    .string()\n    .min(1, 'Password is required')\n    .min(8, 'Password must be at least 8 characters'),\n  remember_me: z.boolean().optional(),\n})\n\nexport const registerSchema = z.object({\n  full_name: z\n    .string()\n    .min(1, 'Full name is required')\n    .min(2, 'Full name must be at least 2 characters')\n    .max(100, 'Full name cannot exceed 100 characters'),\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  password: z\n    .string()\n    .min(1, 'Password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number'\n    ),\n  password_confirmation: z\n    .string()\n    .min(1, 'Password confirmation is required'),\n}).refine((data) => data.password === data.password_confirmation, {\n  message: \"Passwords don't match\",\n  path: [\"password_confirmation\"],\n})\n\nexport const forgotPasswordSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n})\n\nexport const resetPasswordSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  token: z\n    .string()\n    .min(1, 'Reset token is required'),\n  password: z\n    .string()\n    .min(1, 'Password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number'\n    ),\n  password_confirmation: z\n    .string()\n    .min(1, 'Password confirmation is required'),\n}).refine((data) => data.password === data.password_confirmation, {\n  message: \"Passwords don't match\",\n  path: [\"password_confirmation\"],\n})\n\nexport const activatePasswordSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  token: z\n    .string()\n    .min(1, 'Activation token is required'),\n  password: z\n    .string()\n    .min(1, 'Password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number'\n    ),\n  password_confirmation: z\n    .string()\n    .min(1, 'Password confirmation is required'),\n}).refine((data) => data.password === data.password_confirmation, {\n  message: \"Passwords don't match\",\n  path: [\"password_confirmation\"],\n})\n\n// Two-Factor Authentication Schemas\nexport const twoFactorConfirmSchema = z.object({\n  code: z\n    .string()\n    .min(1, 'Verification code is required')\n    .length(6, 'Verification code must be 6 digits')\n    .regex(/^\\d{6}$/, 'Verification code must contain only numbers'),\n})\n\nexport const twoFactorDisableSchema = z.object({\n  password: z\n    .string()\n    .min(1, 'Password is required'),\n})\n\n// Profile Management Schemas\nexport const updateProfileSchema = z.object({\n  full_name: z\n    .string()\n    .min(1, 'Full name is required')\n    .min(2, 'Full name must be at least 2 characters')\n    .max(100, 'Full name cannot exceed 100 characters')\n    .optional(),\n  email: z\n    .string()\n    .email('Please enter a valid email address')\n    .optional(),\n  phone: z\n    .string()\n    .regex(/^[\\+]?[1-9][\\d]{0,15}$/, 'Please enter a valid phone number')\n    .optional()\n    .or(z.literal('')),\n  company: z\n    .string()\n    .max(100, 'Company name cannot exceed 100 characters')\n    .optional()\n    .or(z.literal('')),\n})\n\nexport const changePasswordSchema = z.object({\n  current_password: z\n    .string()\n    .min(1, 'Current password is required'),\n  password: z\n    .string()\n    .min(1, 'New password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number'\n    ),\n  password_confirmation: z\n    .string()\n    .min(1, 'Password confirmation is required'),\n}).refine((data) => data.password === data.password_confirmation, {\n  message: \"Passwords don't match\",\n  path: [\"password_confirmation\"],\n}).refine((data) => data.current_password !== data.password, {\n  message: \"New password must be different from current password\",\n  path: [\"password\"],\n})\n\n// KYC Document Schemas\nexport const kycDocumentSchema = z.object({\n  document_type: z.enum(['passport', 'national_id', 'driving_license'], {\n    required_error: 'Please select a document type',\n  }),\n  front_image: z\n    .instanceof(File, { message: 'Front image is required' })\n    .refine((file) => file.size <= 10 * 1024 * 1024, 'File size must be less than 10MB')\n    .refine(\n      (file) => ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'].includes(file.type),\n      'Only JPEG, PNG, and WebP images are allowed'\n    ),\n  back_image: z\n    .instanceof(File, { message: 'Back image is required' })\n    .refine((file) => file.size <= 10 * 1024 * 1024, 'File size must be less than 10MB')\n    .refine(\n      (file) => ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'].includes(file.type),\n      'Only JPEG, PNG, and WebP images are allowed'\n    )\n    .optional(),\n  selfie_image: z\n    .instanceof(File, { message: 'Selfie image is required' })\n    .refine((file) => file.size <= 10 * 1024 * 1024, 'File size must be less than 10MB')\n    .refine(\n      (file) => ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'].includes(file.type),\n      'Only JPEG, PNG, and WebP images are allowed'\n    ),\n})\n\n// Device Session Schemas\nexport const createDeviceTokenSchema = z.object({\n  device_name: z\n    .string()\n    .min(1, 'Device name is required')\n    .max(50, 'Device name cannot exceed 50 characters'),\n  device_type: z\n    .enum(['web', 'mobile', 'tablet', 'desktop'])\n    .optional(),\n  browser: z\n    .string()\n    .max(50, 'Browser name cannot exceed 50 characters')\n    .optional(),\n  os: z\n    .string()\n    .max(50, 'OS name cannot exceed 50 characters')\n    .optional(),\n})\n\n// Contact Form Schema\nexport const contactFormSchema = z.object({\n  name: z\n    .string()\n    .min(1, 'Name is required')\n    .min(2, 'Name must be at least 2 characters')\n    .max(100, 'Name cannot exceed 100 characters'),\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  subject: z\n    .string()\n    .min(1, 'Subject is required')\n    .max(200, 'Subject cannot exceed 200 characters'),\n  message: z\n    .string()\n    .min(1, 'Message is required')\n    .min(10, 'Message must be at least 10 characters')\n    .max(1000, 'Message cannot exceed 1000 characters'),\n})\n\n// Type exports for use in components\nexport type LoginFormData = z.infer<typeof loginSchema>\nexport type RegisterFormData = z.infer<typeof registerSchema>\nexport type ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>\nexport type ResetPasswordFormData = z.infer<typeof resetPasswordSchema>\nexport type ActivatePasswordFormData = z.infer<typeof activatePasswordSchema>\nexport type TwoFactorConfirmFormData = z.infer<typeof twoFactorConfirmSchema>\nexport type TwoFactorDisableFormData = z.infer<typeof twoFactorDisableSchema>\nexport type UpdateProfileFormData = z.infer<typeof updateProfileSchema>\nexport type ChangePasswordFormData = z.infer<typeof changePasswordSchema>\nexport type KYCDocumentFormData = z.infer<typeof kycDocumentSchema>\nexport type CreateDeviceTokenFormData = z.infer<typeof createDeviceTokenSchema>\nexport type ContactFormData = z.infer<typeof contactFormSchema>\n\n// Validation helper function\nexport const validateSchema = <T>(schema: z.ZodSchema<T>, data: unknown): {\n  success: boolean\n  data?: T\n  errors?: z.ZodError\n} => {\n  try {\n    const validatedData = schema.parse(data)\n    return { success: true, data: validatedData }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { success: false, errors: error }\n    }\n    throw error\n  }\n}\n\n// Form error helper\nexport const getFormErrors = (error: z.ZodError): Record<string, string> => {\n  const errors: Record<string, string> = {}\n  \n  error.errors.forEach((err) => {\n    const path = err.path.join('.')\n    errors[path] = err.message\n  })\n  \n  return errors\n}"],"names":["loginSchema","z.object","z.string","z.boolean","registerSchema","data","forgotPasswordSchema","resetPasswordSchema","activatePasswordSchema","z.literal","z.enum","z.instanceof","file"],"mappings":"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"}